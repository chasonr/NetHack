             Instructions for compiling and installing NetHack 3.6
                               on an OS/2 system
             =====================================================
                         Timo Hakulinen and Ray Chason
                        Last revision: 7 September 2019

0.  Read this entire file before starting, and come back to the Notes below if
    you have any problems.

1.  Make sure all the NetHack files are in the appropriate directory
    structure.  You should have a top directory (e.g. nh33, or whatever you
    like) with subdirectories dat, doc, include, src, util, sys\share,
    sys\os2, and win\tty.  You may have other subdirectories under sys and
    win, but they will not affect compilation for an OS/2 system.  If you do
    not follow this structure, the makefile will not function properly.  The
    .c files for the main program belong in src, those for utility programs in
    util, and OS/2-specific ones in sys\os2.  All the .h files belong in
    include, the documentation in doc, and assorted data files in dat.  There
    are also some necessary files in sys\share (pc*.c, random.c, dgn_*.*,
    lev_*.*).  A more detailed explanation of the directory structure is found
    in file Files, which should be in the top directory.

    If you downloaded or ftp'd the sources from a UNIX system, the lines may
    end in UNIX-style newlines instead of the carriage return and line feed
    pairs used by DOS and OS/2.  You'll have to convert them (with a utility
    like Rahul Dhesi's "flip").  Also, every file should end with a carriage
    return / line feed pair, because Microsoft C has had a habit of ignoring
    the last line of each file otherwise.  Besides, even editing UNIX-style
    files with DOS editors is often a royal pain.

2.  The original Makefile is kept as Makefile.old, but it seems to be
    hopelessly bit-rotted. A new Makefile is provided as Makefile.os2. You
    should copy this to directory src and rename it Makefile. From now on,
    Makefile.os2 will be referred to as "the makefile" in this document.

    The makefile is tested on ArcaOS 5.0.4, with the DMAKE and GCC installed
    by the yum package manager on that platform. It may work on "classic" OS/2,
    but this usage is untested at this writing.

    If you're using some other compiler than GCC, you will have to adapt the
    makefile to your needs.  In particular, change the CC and CFLAGS to suit
    your C compiler.  See the makefile for more information.

    You will need at least these programs in your path:
        * dmake
        * gcc
        * bash
        * cp
        * echo
        * rm
        * touch
    You will need flex and bison also, if you enable compiling the dungeon and
    level compilers from the Lex and Yacc sources.

3.  If you want to change the high score list behavior, examine the top of
    topten.c, in the src directory.  You may want to change the definitions of
    PERSMAX, POINTSMIN, and ENTRYMAX.

4.  Go to the src directory and edit the top of the makefile.

    If you have the flex and bison programs, you can set up the makefile to
    generate the appropriate .h and .c files from their .l and .y counterparts
    whenever you recompile.  This is done by setting USE_FLEX_BISON to Y.

    If you have the PDCurses sources available, you can enable the Curses
    interface. Set USE_CURSES to Y and PDCURSES_TOP to the path to your
    PDCurses source tree. The file ${PDCURSES_TOP}\curses.h must exist.

    Now, enter "dmake all".  If all goes well, you will get an executable in
    the binary directory under the NetHack root.

5.  All the support data files should have been copied to the game directory
    by the make process.  Here is the complete list in alphabetical order of
    all the files that should have gotten there during a full build:

    guidebk.txt
    license
    nethack.exe
    nethack.txt
    nhdat
    NetHack.cnf
    record
    symbols
    sysconf

    If any of the files are missing, try to rerun make.  If that doesn't help,
    you'll have to try to decipher the makefile to find out how to manually
    create the missing files.  These kinds of troubles shouldn't happen except
    for two reasons: You've run out of disk space while compiling or your make
    utility doesn't understand the makefile properly for some reason.  In
    either case, you should get some warnings from the make, though.

    Edit file nethack.cnf in the game directory to reflect your particular
    setup and personal preferences, following the comments there.  More info
    about settable options can be found in the file opthelp and the guidebook.

6.  If you'll be running NetHack from a different subdirectory, you will want
    to "set HACKDIR=c:\games\nh36" (or whatever directory you want to use).
    Add it to your config.sys, if you'll be playing often.

    You can also create a special NetHack entry in your Presentation Manager /
    Workplace Shell desktop.  This will use the included NetHack icon.
    The following is a sample program description for OS/2 1.3 desktop, but
    it's similar for OS/2 2.0:

    Program title:          NetHack 3.6
    Path and file name:     c:\games\nh36\nethack.cmd
    Parameters:
    Working directory:      c:\games\nh36
    Program type:           OS/2 Full screen

    Naturally you must fill in your own game directory and parameters if you
    want to set any.  The program type can be either OS/2 Full screen or OS/2
    Windowed.  Note that you should set the executable path to use the .cmd
    file generated by the makefile.  This file generates an extra pause after
    the program exit, because otherwise you wouldn't get to see the high score
    list upon quitting due to PM/WPS automatically closing the program window.
    When starting NetHack normally from OS/2 command prompt, the command
    processor starts nethack.exe instead, so no extra pause is generated.

7.  If you want to clear up the temporary files and objects created by the
    compilation process, you may issue "make clean".  This will return your
    source tree to near-distribution condition.  Naturally, it will not affect
    your newly built game files in any way.

8.  Play NetHack.  If it works, you're done!


Notes
-----

1)  Save-files and bones-files from previous versions will not work with
    NetHack 3.6.  Don't bother trying to keep them.

2)  To install an update of NetHack after changing something, enter "dmake"
    from the src directory.  If you add, delete, or reorder monsters or
    objects, or you change the format of saved level files, delete any save
    and bones files.  (Trying to use such files sometimes produces amusing
    confusions on the game's part, but usually crashes.)

3)  Note that emx 0.8f is the first version of GCC for OS/2 that can properly
    compile NetHack.  Earlier versions do not work, because they don't support
    the 16 bit API calls of OS/2.

    GCC emx 0.8f does not currently work properly when fseek() function is
    used with text files.  This is well documented in the compiler's
    documentation.  Unfortunately NetHack uses fseek() in several places in
    connection with text data.  This means that some help texts may not come
    out right, but no serious problems should emerge.
